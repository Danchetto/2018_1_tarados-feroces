{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/modules/HttpModule/HttpConstants.js","webpack:///./src/app/modules/HttpModule/HttpModule.js","webpack:///./src/app/modules/TemplateManager/TemplateManager.js","webpack:///./src/app/components/BaseComponent/BaseComponent.js","webpack:///./src/app/components/Button/Button.js","webpack:///./src/app/components/Input/Input.js","webpack:///./src/app/components/Header/Header.js","webpack:///./src/app/components/MenuPoint/MenuPoint.js","webpack:///./src/app/components/Form/Form.js","webpack:///./src/app/components/Footer/Footer.js","webpack:///./src/app/components/Image/Image.js","webpack:///./src/app/components/StandartComponent/StandartComponent.js","webpack:///./src/app/modules/HtmlParser/HtmlParser.js","webpack:///./src/app/views/BaseView/BaseView.js","webpack:///./src/app/views/LoadingView/LoadingView.js","webpack:///./src/app/modules/Router/Router.js","webpack:///./src/app/modules/UserService/UserService.js","webpack:///./src/app/views/LoginView/LoginView.js","webpack:///./src/app/views/MenuView/MenuView.js","webpack:///./src/app/views/RegisterView/RegisterView.js","webpack:///./src/app/views/AuthorizedView/AuthorizedView.js","webpack:///./src/app/views/SettingsView/SettingsView.js","webpack:///./src/app/views/LeaderboardView/LeaderboardView.js","webpack:///./src/app/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","httpDomen","POST","GET","HEADER_CONTENT_TYPE","JSON_CONTENT_TYPE","modules_HttpModule_HttpModule","[object Object]","this","domen","url","headers","doRequest","data","method","Promise","resolve","reject","xhr","XMLHttpRequest","open","addEventListener","response","JSON","parse","responseText","status","message","Error","forEach","current","setRequestHeader","withCredentials","send","stringify","TemplateManager_TemplateManager","templateId","changeTemplate","context","template","Handlebars","compile","BaseComponent_BaseComponent","_element","events","functionExp","div","document","createElement","innerHTML","getHTML","lastChild","addListeners","component","appendChild","item","func","match","Function","Button_Button","super","render","Input_Input","getElementsByTagName","Header_Header","MenuPoint_MenuPoint","Form_Form","Footer_Footer","Image_Image","StandartComponent_StandartComponent","modules_HtmlParser_HtmlParser","regExp","regExpEnd","objects","tagStack","componentFactory","Button","Input","Header","MenuPoint","Form","Footer","Image","a","img","ul","stringToObject","html","getElement","obj","pop","length","children","push","tag","slice","exec","handleCloseTag","handleOpenTag","input","compareResult","previousIndex","replace","index","text","handleTag","str","split","attributes","currentProp","propExp","setObjectAttributes","performObject","parseHtml","map","element","BaseView_BaseView","parent","parentNode","removeChild","classList","add","remove","LoadingView_LoadingView","modules_Router_Router","lastView","urls","insertionElement","querySelector","loadingElement","__render","start","view","loaded","update","deleteLast","show","showLoading","checkAuth","route","window","history","pushState","path","pageUpdate","preRender","then","event","location","pathname","hide","needAuthorization","modules_UserService_UserService","isAuthorized","hideLoading","showPage","hideLast","doGet","deleteElement","validateLogin","blocks","getElementsByClassName","reduce","result","validateLoginInput","doPost","login","password","userLogin","go","error","alert","block","validateFocusLoginInput","validateBlurLoginInput","goToLogin","goToSignUp","goToScore","goBack","validateRegistration","validateRegistrationInput","email","innerText","validateFocusRegistrationInput","validateBlurRegistrationInput","goToSettings","signOut","userLogout","SettingsView_settings","avatar","reader","validateSettings","FileReader","validateSettingsInput","file","files","readAsDataURL","onload","validateFocusSettingsInput","validateBlurSettingsInput","goToUser","currentPosition","paginate","position","count","viewUpdate","addUrl","row","keys","newRow","points","rows","undefined","checkSession"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const httpDomen = 'http://deadlinez.herokuapp.com/alexalone';\nexport const POST = 'POST';\nexport const GET = 'GET';\nexport const HEADER_CONTENT_TYPE = 'Content-Type';\nexport const JSON_CONTENT_TYPE = 'application/json;charset=UTF-8';\n","import {httpDomen, HEADER_CONTENT_TYPE, JSON_CONTENT_TYPE, POST, GET} from './HttpConstants'\n/**\n * Класс, отвечающий за отправку запросов на сервер\n * @module HttpModule\n */\nclass HttpModule {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.domen = httpDomen;\n    }\n\n    /**\n     * Делает GET-запрос\n     * @param {string} url\n     * @param {Object} headers\n     * @return {Promise<any>}\n     */\n    doGet(url, headers = [{name: HEADER_CONTENT_TYPE, value: JSON_CONTENT_TYPE}]) {\n        return this.doRequest(GET, url, headers);\n    }\n\n    /**\n     * Делает POST-запрос\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @return {Promise<any>}\n     */\n    doPost(url, data = null, headers = [{name: HEADER_CONTENT_TYPE, value: JSON_CONTENT_TYPE}]) {\n        return this.doRequest(POST, url, data, headers);\n    }\n\n    /**\n     * Отправляет запрос указанного типа\n     * @param {string} method\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} headers\n     * @return {Promise<any>}\n     * @private\n     */\n    doRequest(method = GET, url = '/', data = null, headers = []) {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(method, `${this.domen}${url}`, true);\n\n            xhr.addEventListener('load', () => {\n                const response = JSON.parse(xhr.responseText);\n\n                if (xhr.status < 300) {\n                    resolve(response);\n                } else {\n                    reject(response.message);\n                }\n            });\n\n            xhr.addEventListener('error', () => {\n                reject(new Error('Network error'));\n            });\n\n            headers.forEach((current) => xhr.setRequestHeader(current.name, current.value));\n\n            xhr.withCredentials = true;\n\n            data ? xhr.send(JSON.stringify(data)) : xhr.send();\n        });\n    }\n\n}\n\nconst httpModule = new HttpModule();\nexport default httpModule;\n","/**\n * Класс для работы с шаблонами\n * @module TemplateManager\n */\nclass TemplateManager {\n\n    /**\n     * @param {string} templateId - шаблон\n     * @constructor\n     */\n    constructor(templateId = '') {\n        if (!templateId) {\n            return;\n        }\n\n        this.changeTemplate(templateId);\n    }\n\n    /**\n     * Возвращает отрендеренный шаблон\n     * @param {object} context - контекст шаблона\n     * @param {string} templateId - шаблон\n     * @return {*}\n     */\n    getHTML(context, templateId) {\n        if (templateId) {\n            this.changeTemplate(templateId);\n        }\n        return this.template(context);\n    }\n\n    /**\n     * Компиляция шаблона\n     * @param {string} templateId - шаблон\n     */\n    changeTemplate(templateId) {\n        this.template = Handlebars.compile(templateId);\n    }\n}\n\nconst templateManager = new TemplateManager();\nexport default templateManager;\n","import templateManager from '../../modules/TemplateManager/TemplateManager';\n\n/** Базовый класс компоненты\n * @module BaseComponent\n */\nexport default class BaseComponent {\n\n    /**\n     * @param {string} [template] - шаблон компоненты\n     * @constructor\n     */\n    constructor(template) {\n        this._element = null;\n        this.template = template;\n        this.events = ['click', 'focus', 'blur'];\n        this.functionExp = /\\s*\\(([\\w, ]*)\\)\\n*\\t*\\s*{(.*)}/i;\n    }\n\n    /**\n     * Создание элемента по шаблона с контекстом\n     * @param {object} context - контекст шаблона\n     */\n    render(context) {\n        const div = document.createElement('div');\n        div.innerHTML = templateManager.getHTML(context, this.template);\n        this._element = div.lastChild;\n        this.addListeners(context);\n    }\n\n    /**\n     * Добавление дочерней компоненты\n     * @param {BaseComponent} component\n     */\n    appendChild(component) {\n        this._element.appendChild(component);\n    }\n\n    /**\n     * Возращает элемент компоненты\n     * @return {HTMLElement}\n     */\n    element() {\n        return this._element;\n    }\n\n    /**\n     * Добавление обработчиков событий\n     * @param {object} context\n     */\n    addListeners(context) {\n        this.events.forEach((item) => {\n            if (context[item]) {\n                const func = context[item].match(this.functionExp);\n                this._element.addEventListener(item, new Function(func[1], func[2]));\n            }\n        });\n    }\n}\n\n","import BaseComponent from '../BaseComponent/BaseComponent'\n\nexport default class Button extends BaseComponent {\n\n    render(context) {\n        this.template = `<div class=\"button {{class}}\"><p>{{text}}</p></div>`;\n        super.render(context);\n    }\n}\n\n","import BaseComponent from '../BaseComponent/BaseComponent'\n\nexport default class Input extends BaseComponent {\n\n    render(context) {\n        this.template = `<div class=\"input-block {{block-class}}\">\n                            <label class=\"{{label-class}}\">{{label-text}}</label>\n                            <div class=\"error {{error-class}}\">{{error-text}}</div>\n                            <input name=\"{{input-name}}\" focus=\"{{focus}}\" blur=\"{{blur}}\"\n                            type={{type}} class=\"{{input-class}}\" placeholder=\"{{placeholder}}\" value=\"{{value}}\"/>\n                         </div>`;\n        super.render(context);\n    }\n\n    addListeners(context) {\n        this.events.forEach((item) => {\n            if (context[item]) {\n                const func = context[item].match(this.functionExp);\n                this._element.getElementsByTagName('input')[0].addEventListener(item, new Function(func[1], func[2]));\n            }\n        });\n    }\n}\n\n","import BaseComponent from '../BaseComponent/BaseComponent'\n\nexport default class Header extends BaseComponent {\n\n    render(context) {\n        this.template = `<div class=\"header {{class}}\">\n                            <h1>{{text}}</h1>\n                         </div>`;\n        super.render(context);\n    }\n}\n","import BaseComponent from '../BaseComponent/BaseComponent'\n\nexport default class MenuPoint extends BaseComponent {\n\n    render(context) {\n        this.template = `<li><a href=\"{{href}}\">{{text}}</a></li>`;\n        super.render(context);\n    }\n}\n","import BaseComponent from '../BaseComponent/BaseComponent'\n\nexport default class Form extends BaseComponent {\n\n    render(context) {\n        this.template = `<form method=\"{{method}}\"></form>`;\n        super.render(context);\n    }\n}\n\n","import BaseComponent from '../BaseComponent/BaseComponent'\n\nexport default class Footer extends BaseComponent {\n\n    render(context) {\n        this.template = `<div class=\"footer\"><p>{{text}}</p></div>`;\n        super.render(context);\n    }\n}\n","import BaseComponent from '../BaseComponent/BaseComponent'\n\n\nexport default class Image extends BaseComponent {\n\n    render(context) {\n        this.template = `<img class=\"{{class}}\" src=\"{{src}}\">`;\n        super.render(context);\n    }\n}\n","import BaseComponent from '../BaseComponent/BaseComponent'\n\nexport default class StandartComponent extends BaseComponent {\n\n    render(context) {\n        this.template = `<{{tag}} class=\"{{class}}\">{{text}}</{{tag}}>`;\n        super.render(context);\n    }\n}\n","import Button from '../../components/Button/Button'\nimport Input from '../../components/Input/Input'\nimport Header from '../../components/Header/Header'\nimport MenuPoint from '../../components/MenuPoint/MenuPoint'\nimport Form from '../../components/Form/Form'\nimport Footer from '../../components/Footer/Footer'\nimport Image from '../../components/Image/Image'\nimport StandartComponent from '../../components/StandartComponent/StandartComponent'\n\n/** Класс для парсинга html тэгов\n * @module HtmlParser\n */\nclass HtmlParser {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.regExp = /<[a-z0-9 _\\-\"'=(){}\\[\\],;:.@!?\\/+]+>|<\\/[a-z0-9 _\\-\"'=(){}\\[\\],;:.@!?]+>/ig;\n        this.regExpEnd = /<\\/[a-z0-9 _\\-\"'=(){}\\[\\],;:.@!?]+>/i;\n        this.objects = [];\n        this.tagStack = [];\n\n        this.componentFactory = {\n            Button: () => new Button(),\n            Input: () => new Input(),\n            Header: () => new Header(),\n            MenuPoint: () => new MenuPoint(),\n            Form: () => new Form(),\n            Footer: () => new Footer(),\n            Image: () => new Image(),\n            div: () => new StandartComponent(),\n            a: () => new StandartComponent(),\n            p: () => new StandartComponent(),\n            img: () => new StandartComponent(),\n            ul: () => new StandartComponent(),\n        };\n    }\n\n    /**\n     * Возвращает отрендеренный HTMLElement\n     * @param {string} template - шаблон для парсинга\n     * @return {HTMLDivElement}\n     */\n    getHTML(template) {\n        this.stringToObject(template);\n        const html = document.createElement('div');\n        this.objects.forEach((item) => {\n            if (item) {\n                html.appendChild(this.getElement(item));\n            }\n        });\n        this.objects = [];\n        return html;\n\n    }\n\n    /**\n     * Обрабатывает закрывающие тэги\n     */\n    handleCloseTag() {\n        const obj = this.tagStack.pop();\n        if (this.tagStack.length === 0) {\n            this.objects.push(obj);\n            return;\n        }\n\n        this.tagStack[this.tagStack.length - 1].children.push(obj);\n    }\n\n    /**\n     * Обрабатывает открывающий тэг\n     * @param {string} tag - входной тэг\n     */\n    handleOpenTag(tag) {\n        const obj = {\n            object: tag.slice(1, -1),\n            children: [],\n        };\n\n        this.tagStack.push(obj);\n    }\n\n    /**\n     * Обрабатывает тэг\n     * @param {string} tag - входной тэг\n     */\n    handleTag(tag) {\n        const result = this.regExpEnd.exec(tag);\n        result ? this.handleCloseTag(tag) : this.handleOpenTag(tag);\n    }\n\n    /**\n     * Парсит строку шаблона по руглярным выражениям\n     * @param {string} input - входной шаблон\n     */\n    parseHtml(input) {\n        let compareResult = '';\n        let previousIndex = 0;\n        input = input.replace(/\\n/g, ' ');\n        while (compareResult = this.regExp.exec(input)) {\n            if (previousIndex < compareResult.index) {\n                if (this.tagStack.length) {\n                    this.tagStack[this.tagStack.length - 1].text = input.slice(previousIndex, compareResult.index);\n                }\n            }\n\n            this.handleTag(compareResult[0]);\n\n            previousIndex = compareResult.index + compareResult[0].length;\n        }\n    }\n\n    /**\n     * Добавляет свойства элементу объекта после парснга\n     * @param {object} object - объект после парсинга\n     */\n    setObjectAttributes(object) {\n        const str = object.object.split(' ');\n        object.tag = str[0];\n        object.attributes = {};\n        object.attributes.text = object.text;\n        object.attributes.tag = object.tag;\n\n        let currentProp = '';\n        const propExp = /([\\w-_]+)=\"([^\"]*)\"/gi;\n        while (currentProp = propExp.exec(object.object)) {\n            object.attributes[currentProp[1]] = currentProp[2];\n        }\n    }\n\n    /**\n     * Обрабатывает объект после парсинга\n     * @param {object} object - объект после парсинга\n     * @return {object}\n     */\n    performObject(object) {\n        if (!object || !object.object) {\n            return object;\n        }\n\n        this.setObjectAttributes(object);\n\n        if (!object.children.length) {\n            return object;\n        }\n\n        object.children.forEach((obj) => this.performObject(obj));\n    }\n\n    /**\n     * Парсит и возвращает готовый массив элементов\n     * @param {string} input - входной шаблон\n     * @return {Array}\n     */\n    stringToObject(input) {\n        this.parseHtml(input);\n        this.objects.map((obj) => this.performObject(obj));\n\n        return this.objects;\n    }\n\n    /**\n     * Возвращает элемент компоненты по тэгу\n     * @param {object} object\n     * @return {HTMLElement}\n     */\n    getElement(object) {\n        const component = this.componentFactory[object.tag]();\n        component.render(object.attributes);\n\n        object.children.forEach((item) => component.appendChild(this.getElement(item)));\n\n        return component.element();\n    }\n}\n\nconst htmlParser = new HtmlParser();\nexport default htmlParser;\n\n","import htmlParser from '../../modules/HtmlParser/HtmlParser'\nimport templateManager from '../../modules/TemplateManager/TemplateManager'\n\n/**\n * Базовый класс вьюх\n * @module BaseView\n */\nexport default class BaseView {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.element = null;\n        this.context = {};\n    }\n\n    /**\n     * Получает параметры шаблона для вьюхи\n     * @return {Promise<any>}\n     */\n    preRender() {\n        return new Promise((resolve, reject) => resolve({}));\n    }\n\n    /**\n     * Возвращает шаблон вьюхи\n     * @return {string}\n     */\n    render() {\n       return '';\n    }\n\n    /**\n     * Удаляет элемент вьюхи из DOM\n     * @return {Node}\n     */\n    deleteElement() {\n        if (this.element) {\n            const parent = this.element.parentNode;\n            parent.removeChild(this.element);\n            return parent;\n        }\n    }\n\n    /**\n     * Сообщает, нужна ли авторизация для отрисовки вьюхи\n     * @return {boolean}\n     */\n    needAuthorization() {\n        return true;\n    }\n\n    /**\n     * Обновляет контекст вьюхи согласно новому контескту\n     * @param {Object} context\n     * @return {null}\n     */\n    update(context = {}) {\n        return null;\n    }\n\n    /**\n     * Скрывает элемент вью\n     */\n    hide() {\n        if (this.element) {\n            this.element.classList.add('hidden');\n        }\n    }\n\n    /**\n     * Показывает элемент вью\n     */\n    show() {\n        if (this.element) {\n            this.element.classList.remove('hidden');\n        }\n    }\n\n    /**\n     * Получает DOM-элемент вью\n     * @return {Node}\n     */\n    __render() {\n        this.element = htmlParser.getHTML(templateManager.getHTML(this.context, this.render()));\n        return this.element;\n    }\n}\n","import BaseView from '../BaseView/BaseView'\n\nexport default class LoadingView extends BaseView {\n\n    render() {\n        return `<Header>Loading...</Header>`;\n    }\n}\n","import userService from '../UserService/UserService'\nimport LoadingView from '../../views/LoadingView/LoadingView'\n\n/**\n * Класс, отвечающий за переход по url\n * @module Router\n */\nclass Router {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.lastView = null;\n        this.urls = {};\n        this.insertionElement = document.querySelector('.root');\n        this.loadingElement = new LoadingView().__render();\n        this.loadingElement.classList.add('hidden');\n        this.insertionElement.appendChild(this.loadingElement);\n        this.start();\n    }\n\n    /**\n     * Регистрирует url в роутере\n     * @param {string} url\n     * @param {BaseView} view\n     * @return {Router}\n     */\n    addUrl(url, view) {\n        this.urls[url] = {\n            view,\n            loaded: false,\n        };\n        return this;\n    }\n\n    /**\n     * Обновляет и перерисовывает вью в DOM\n     * @param {Object} context\n     */\n    viewUpdate(context) {\n        this.lastView.update(context);\n        const parent = this.deleteLast();\n        this.lastView.__render();\n        parent.appendChild(this.lastView.element);\n        this.lastView.show();\n    }\n\n    /**\n     * Переходит на новый url\n     * @param {string} url\n     * @param {Node} insertionElement\n     * @return {boolean}\n     */\n    go(url, insertionElement = this.insertionElement) {\n        if (!this.urls[url]) {\n            return false;\n        }\n\n        this.showLoading();\n        url = this.checkAuth(url);\n        this.route(url, insertionElement);\n        window.history.pushState({path: url}, url, url);\n    }\n\n    /**\n     * Отрисовывает привязанную к url вью\n     * @param {string} url\n     * @param {Node} insertionElement\n     * @private\n     */\n    route(url, insertionElement = this.insertionElement) {\n\n        if (!this.urls[url].loaded) {\n            this.urls[url].loaded = true;\n            this.urls[url].view.preRender().then(\n                (response) => {\n                    this.urls[url].view.__render();\n                    insertionElement.appendChild(this.urls[url].view.element);\n\n                    this.pageUpdate(url);\n                }\n            );\n        } else {\n            this.pageUpdate(url);\n        }\n    }\n\n    /**\n     * Навешивает обработчик на popstate\n     * @private\n     */\n    start() {\n        window.addEventListener('popstate', (event) => {\n            this.route(window.location.pathname);\n        });\n    }\n\n    /**\n     * Показывает текущую вью\n     * @param {string} url\n     * @private\n     */\n    showPage(url) {\n        this.urls[url].view.show();\n    }\n\n    /**\n     * Скрывает предыдущую вью\n     * @private\n     */\n    hideLast() {\n        this.lastView && this.lastView.hide();\n    }\n\n    /**\n     * Удаляет последнюю вью из DOM\n     * @return {Node}\n     * @private\n     */\n    deleteLast() {\n        if (this.lastView.element) {\n            const parent = this.lastView.element.parentNode;\n            parent.removeChild(this.lastView.element);\n            return parent;\n        }\n    }\n\n    /**\n     * Преобразует url к нужному, согласно текущей сессии\n     * @param {string} url\n     * @return {string}\n     * @private\n     */\n    checkAuth(url) {\n        if (this.urls[url].view.needAuthorization() && !userService.isAuthorized) {\n            return '/';\n        } else if (!this.urls[url].view.needAuthorization() && userService.isAuthorized) {\n            return '/user/';\n        }\n\n        return url;\n    }\n\n    /**\n     * Скрывает последнюю вью и выводит текущую\n     * @param {string} url\n     * @private\n     */\n    pageUpdate(url) {\n        // this.hideLast();\n        this.hideLoading();\n        this.lastView = this.urls[url].view;\n        this.showPage(url);\n    }\n\n    /**\n     * Отображает вью загрузки\n     */\n    showLoading() {\n        this.hideLast();\n        this.loadingElement.classList.remove('hidden');\n    }\n\n    hideLoading() {\n        this.loadingElement.classList.add('hidden');\n    }\n}\n\nconst router = new Router();\nexport default router;\n","import httpModule from '../HttpModule/HttpModule'\nimport router from '../Router/Router'\n\n/**\n * Класс для работы с сессией пользователя\n * @module UserService\n */\nclass UserService {\n\n    /**\n     * Проверка авторизации пользователя\n     * @return {PromiseLike<boolean> | Promise<boolean>}\n     */\n    checkSession() {\n        return httpModule.doGet('/me').then(\n            (response) => this.isAuthorized = true,\n            (reject) => this.isAuthorized = false);\n    }\n\n    /**\n     * Установка флага авторизованного пользователя\n     */\n    userLogin() {\n        this.isAuthorized = true;\n    }\n\n    /**\n     * Сброс флага авторизованного пользователя\n     * Удаление отрендеренных вью пользователя\n     */\n    userLogout() {\n        this.isAuthorized = false;\n        router.urls['/user/'].view.deleteElement();\n        router.urls['/user/'].loaded = false;\n        if (router.urls['/settings/'].loaded) {\n            router.urls['/settings/'].view.deleteElement();\n            router.urls['/settings/'].loaded = false;\n        }\n    }\n}\n\nconst userService = new UserService();\nexport default userService;\n","import BaseView from '../BaseView/BaseView'\nimport router from \"../../modules/Router/Router\";\nimport userService from \"../../modules/UserService/UserService\";\nimport httpModule from \"../../modules/HttpModule/HttpModule\";\n\nexport default class LoginView extends BaseView {\n\n    render() {\n        return `<div class=\"page\">\n                        <Header>Login</Header>\n                        <div class=\"form-block login\">\n                            <Form>\n                                <Input block-class=\"user-name\" error-class=\"hidden\" error-text=\"empty username\"\n                                label-text=\"Enter login:\" type=\"text\" placeholder=\"Enter login\"\n                                focus=\"() { validateFocusLoginInput(document.querySelector('.login').getElementsByClassName('input-block')[0]) }\"\n                                blur=\"() { validateBlurLoginInput(document.querySelector('.login').getElementsByClassName('input-block')[0]) }\">\n                                </Input>\n                                <Input block-class=\"user-password\"  error-class=\"hidden\" error-text=\"empty password\"\n                                label-text=\"Password:\" type=\"password\" placeholder=\"Enter password\"\n                                focus=\"() { validateFocusLoginInput(document.querySelector('.login').getElementsByClassName('input-block')[1]) }\"\n                                blur=\"() { validateBlurLoginInput(document.querySelector('.login').getElementsByClassName('input-block')[1]) }\">\n                                </Input>\n                                <div class=\"button-container\">\n                                    <Button class=\"button large\" click=\"() {validateLogin();}\">Log In!</Button>\n                                    <Button class=\"button large\" click=\"(event){ event.preventDefault(); goBack();  }\">Back</Button>\n                                </div>\n                            </Form>\n                        </div>\n                    </div>\n                    <Footer>Made by Tarados Feroces</Footer>`;\n    }\n\n    needAuthorization() {\n        return false;\n    }\n}\n\nwindow.validateLogin = () => {\n    const blocks = [...document.querySelector('.login').getElementsByClassName('input-block')];\n    if (blocks.reduce((result, current) => result + validateLoginInput(current), 0) == blocks.length) {\n        httpModule.doPost('/signin',\n            {\n                login: blocks[0].querySelector('input').value,\n                password: blocks[1].querySelector('input').value,\n            }).then(\n            (responseText) => {\n                userService.userLogin();\n                router.go('/user/');\n                blocks.forEach((item) => item.querySelector('input').value = '');\n            },\n            (error) => {\n                alert(error);\n            }\n        );\n    }\n};\n\nwindow.validateLoginInput = (block) => {\n    const input = block.querySelector('input');\n    const error = block.querySelector('.error');\n\n    if (input.value === '') {\n        input.classList.add('input-error');\n        error.classList.remove('hidden');\n        return false;\n    } else {\n        input.classList.remove('input-error');\n        error.classList.add('hidden');\n        return true;\n    }\n};\n\nwindow.validateFocusLoginInput = (block) => {\n    block.querySelector('input').classList.remove('input-error');\n    block.querySelector('.error').classList.add('hidden');\n};\n\nwindow.validateBlurLoginInput = (block) => {\n    const input = block.querySelector('input');\n    const error = block.querySelector('.error');\n\n    if (input.value === '') {\n        input.classList.add('input-error');\n        error.classList.remove('hidden');\n    }\n};","import BaseView from '../BaseView/BaseView'\nimport router from '../../modules/Router/Router'\n\nexport default class MenuView extends BaseView {\n\n    render() {\n        return `<div class=\"menu\">\n                    <Header>Menu</Header>\n                    <div class=\"points\">\n                        <ul>\n                            <MenuPoint click=\"(event) {event.preventDefault(); goToSignUp();}\">SignUp</MenuPoint>\n                            <MenuPoint click=\"(event) {event.preventDefault(); goToLogin();}\">SignIn</MenuPoint>\n                        </ul>\n                    </div>\n                </div>`;\n    }\n\n    needAuthorization() {\n        return false;\n    }\n}\n\nwindow.goToLogin = () => {\n    router.go('/login/');\n};\n\nwindow.goToSignUp = () => {\n    router.go('/signup/');\n};\n\nwindow.goToScore = () => {\n    router.go('/leaderboard/');\n};\n\nwindow.goBack = () => {\n    router.go('/');\n};\n","import BaseView from '../BaseView/BaseView'\nimport router from \"../../modules/Router/Router\";\nimport userService from \"../../modules/UserService/UserService\";\nimport httpModule from \"../../modules/HttpModule/HttpModule\";\n\nexport default class RegisterView extends BaseView {\n\n    render() {\n        return `<div class=\"page\">\n                    <Header>Sign Up!</Header>\n                    <div class=\"form-block registration\">\n                        <Form>\n                            <Input block-class=\"user-name\" error-class=\"hidden\" error-text=\"empty username\"\n                            label-text=\"Login:\" type=\"text\" placeholder=\"Enter login\"\n                            focus=\"() { validateFocusRegistrationInput(document.querySelector('.registration').getElementsByClassName('input-block')[0]) }\"\n                            blur=\"() { validateBlurRegistrationInput(document.querySelector('.registration').getElementsByClassName('input-block')[0]) }\">\n                            </Input>\n                            <Input block-class=\"user-email\" error-class=\"hidden\" error-text=\"empty email\"\n                            label-text=\"E-mail:\" type=\"text\" placeholder=\"Enter E-mail\"\n                            focus=\"() { validateFocusRegistrationInput(document.querySelector('.registration').getElementsByClassName('input-block')[1]) }\"\n                            blur=\"() { validateBlurRegistrationInput(document.querySelector('.registration').getElementsByClassName('input-block')[1]) }\">\n                            </Input>\n                            <Input block-class=\"user-password\" error-class=\"hidden\" error-text=\"empty password\"\n                            label-text=\"Password:\" type=\"password\" placeholder=\"Enter password\"\n                            focus=\"() { validateFocusRegistrationInput(document.querySelector('.registration').getElementsByClassName('input-block')[2]) }\"\n                            blur=\"() { validateBlurRegistrationInput(document.querySelector('.registration').getElementsByClassName('input-block')[2]) }\">\n                            </Input>\n                            <Input block-class=\"user-repeat-password\" error-class=\"hidden\" error-text=\"empty password\"\n                            label-text=\"Repeat password:\" type=\"password\" placeholder=\"Enter password\"\n                            focus=\"() { validateFocusRegistrationInput(document.querySelector('.registration').getElementsByClassName('input-block')[3]) }\"\n                            blur=\"() { validateBlurRegistrationInput(document.querySelector('.registration').getElementsByClassName('input-block')[3]) }\">\n                            </Input>\n                            <div class=\"button-container\">\n                                <Button class=\"button large\" click=\"(){ validateRegistration(); }\">Sign Up!</Button>\n                                <Button class=\"button large\" click=\"(event){ event.preventDefault(); goBack();  }\">Back</Button>\n                            </div>\n                        </Form>\n                    </div>\n                </div>\n                <Footer>Made by Tarados Feroces</Footer>\\;`;\n    }\n\n    needAuthorization() {\n        return false;\n    }\n}\n\nwindow.validateRegistration = () => {\n    const blocks = [...document.querySelector('.registration').getElementsByClassName('input-block')];\n    if (blocks.reduce((result, current) => result + validateRegistrationInput(current), 0) == blocks.length) {\n        httpModule.doPost('/signup',\n            {\n                login: blocks[0].querySelector('input').value,\n                email: blocks[1].querySelector('input').value,\n                password: blocks[2].querySelector('input').value,\n            }).then(\n            (responseText) => {\n                userService.userLogin();\n                router.go('/user/');\n                blocks.forEach((item) => item.querySelector('input').value = '');\n            },\n            (error) => {\n                document.querySelector('.registration').getElementsByClassName('input-block')[0].querySelector('.error').innerText = error;\n                document.querySelector('.registration').getElementsByClassName('input-block')[0].querySelector('.error').classList.remove('hidden');\n            }\n        );\n    }\n};\n\nwindow.validateRegistrationInput = (block) => {\n    const input = block.querySelector('input');\n    const error = block.querySelector('.error');\n\n    if (input.value === '') {\n        input.classList.add('input-error');\n        error.classList.remove('hidden');\n        return false;\n    } else {\n        input.classList.remove('input-error');\n        error.classList.add('hidden');\n        return true;\n    }\n};\n\nwindow.validateFocusRegistrationInput = (block) => {\n    block.querySelector('input').classList.remove('input-error');\n    block.querySelector('.error').classList.add('hidden');\n};\n\nwindow.validateBlurRegistrationInput = (block) => {\n    const input = block.querySelector('input');\n    const error = block.querySelector('.error');\n\n    if (input.value === '') {\n        input.classList.add('input-error');\n        error.classList.remove('hidden');\n    }\n};\n","import BaseView from '../BaseView/BaseView'\nimport httpModule from '../../modules/HttpModule/HttpModule'\nimport userService from '../../modules/UserService/UserService'\nimport router from '../../modules/Router/Router'\n\nexport default class AuthorizedView extends BaseView {\n\n    preRender() {\n        return httpModule.doGet('/me').then(\n            (response) => {\n                this.context = response;\n            }\n        );\n    }\n\n    render() {\n        return `<div class=\"page\">\n                    <Header>Hello, {{login}}</Header>\n                    {{#if avatar}}\n                        <Image class=\"main-avatar\" src=\"{{{avatar}}}\"></Image>\n                    {{else}}\n                        <Image class=\"main-avatar\" src=\"../../static/images/mainAvatar.jpg\"></Image>\n                    {{/if}}    \n                    <div class=\"button-container\">\n                        <Button class=\"button large\" click=\"(event){ event.preventDefault(); goToSettings();  }\">Settings</Button>\n                        <Button class=\"button large\" click=\"(event){ event.preventDefault(); goToScore();  }\">Leaderboard</Button>\n                        <Button class=\"button large\" click=\"(event){ event.preventDefault(); signOut();  }\">Sign out</Button>\n                    </div>\n                </div>`;\n    }\n}\n\nwindow.goToSettings = () => router.go('/settings/');\n\nwindow.signOut = () => {\n    httpModule.doPost('/signout').then(\n        (response) => {\n            userService.userLogout();\n            router.go('/');\n        }\n    );\n};\n","import BaseView from '../BaseView/BaseView'\nimport httpModule from '../../modules/HttpModule/HttpModule'\nimport router from '../../modules/Router/Router'\n\nexport default class SettingsView extends BaseView {\n\n    preRender() {\n        return httpModule.doGet('/me').then(\n            (response) => {\n                this.context = response;\n            }\n        );\n    }\n\n    render() {\n        return `<div class=\"page\">\n                    <Header>Settings</Header>\n                    <div class=\"form-block settings\">\n                        {{#if avatar}}\n                            <Image class=\"main-avatar\" src=\"{{{avatar}}}\"></Image>\n                        {{else}}\n                            <Image class=\"main-avatar\" src=\"../../static/images/mainAvatar.jpg\"></Image>\n                        {{/if}} \n                        <Form>\n                            <Input block-class=\"user-name\" error-class=\"hidden\" error-text=\"empty username\"\n                            label-text=\"Login:\" type=\"text\" value=\"{{login}}\"\n                            focus=\"() { validateFocusSettingsInput(document.querySelector('.settings').getElementsByClassName('input-block')[0]) }\"\n                            blur=\"() { validateBlurSettingsInput(document.querySelector('.settings').getElementsByClassName('input-block')[0]) }\">\n                            </Input>\n                            <Input block-class=\"user-email\" error-class=\"hidden\" error-text=\"empty email\"\n                            label-text=\"Email:\" type=\"text\" value=\"{{email}}\"\n                            focus=\"() { validateFocusSettingsInput(document.querySelector('.settings').getElementsByClassName('input-block')[1]) }\"\n                            blur=\"() { validateBlurSettingsInput(document.querySelector('.settings').getElementsByClassName('input-block')[1]) }\">\n                            </Input>\n                            <Input error-class=\"hidden\"\n                            label-text=\"Avatar:\" type=\"file\">\n                            </Input>\n                            <div class=\"button-container\">\n                                <Button class=\"button large\" click=\"(){ validateSettings(); }\">Save</Button>\n                                <Button class=\"button large\" click=\"(event){ event.preventDefault(); goToUser();  }\">Back</Button>\n                            </div>\n                        </Form>\n                    </div>\n                </div>`;\n    }\n\n}\n\nconst settings = () => {\n    const blocks = [...document.querySelector('.settings').getElementsByClassName('input-block')];\n    router.showLoading();\n    httpModule.doPost('/user/update',\n        {\n            login: blocks[0].querySelector('input').value,\n            email: blocks[1].querySelector('input').value,\n            avatar: reader.result,\n        }).then(\n        (responseText) => {\n            router.urls['/user/'].loaded = false;\n            router.urls['/user/'].view.deleteElement();\n            router.urls['/settings/'].loaded = false;\n            router.urls['/settings/'].view.deleteElement();\n            router.hideLoading();\n            router.go('/user/');\n            blocks.forEach((item) => item.querySelector('input').value = '');\n        },\n        (error) => {\n            document.querySelector('.settings').getElementsByClassName('input-block')[0].querySelector('.error').innerText = error;\n            document.querySelector('.settings').getElementsByClassName('input-block')[0].querySelector('.error').classList.remove('hidden');\n        }\n    );\n};\n\nwindow.validateSettings = () => {\n    const blocks = [...document.querySelector('.settings').getElementsByClassName('input-block')];\n    window.reader = new FileReader();\n    if (blocks.reduce((result, current) => result + validateSettingsInput(current), 0) == blocks.length) {\n        const file = blocks[2].querySelector('input').files[0];\n        reader.readAsDataURL(file);\n        reader.onload = settings;\n\n    }\n};\n\nwindow.validateSettingsInput = (block) => {\n    const input = block.querySelector('input');\n    const error = block.querySelector('.error');\n\n    if (input.value === '') {\n        input.classList.add('input-error');\n        error.classList.remove('hidden');\n        return false;\n    } else {\n        input.classList.remove('input-error');\n        error.classList.add('hidden');\n        return true;\n    }\n};\n\nwindow.validateFocusSettingsInput = (block) => {\n    block.querySelector('input').classList.remove('input-error');\n    block.querySelector('.error').classList.add('hidden');\n};\n\nwindow.validateBlurSettingsInput = (block) => {\n    const input = block.querySelector('input');\n    const error = block.querySelector('.error');\n\n    if (input.value === '') {\n        input.classList.add('input-error');\n        error.classList.remove('hidden');\n    }\n};\n\nwindow.goToUser = () => router.go('/user/');\n","import BaseView from '../BaseView/BaseView'\nimport httpModule from '../../modules/HttpModule/HttpModule'\nimport router from '../../modules/Router/Router'\n\nexport default class LeaderboardView extends BaseView {\n\n    update(context = {}) {\n        for (const row in Object.keys(context.data)) {\n            const newRow = [];\n            newRow.push(context.data[row].login);\n            newRow.push(context.data[row].points);\n            this.context.rows.push(newRow);\n        }\n    }\n\n    preRender() {\n        return httpModule.doPost('/score', {position: 0, count: 5}).then(\n            (response) => {\n                this.context.rows = [];\n                this.context.headers = ['Login', 'Points'];\n                for (const row in Object.keys(response.data)) {\n                    const newRow = [];\n                    newRow.push(response.data[row].login);\n                    newRow.push(response.data[row].points);\n\n                    this.context.rows.push(newRow);\n                }\n            }\n        );\n    }\n\n    render() {\n        return `<div class=\"leaderboard\">\n                        <Header>Leaderboard</Header>\n                        <div class=\"table\">\n                            <div class=\"table-row\">\n                                {{#each headers}}\n                                <div class=\"table-data table-header\">{{this}}</div>\n                                {{/each}}\n                            </div>\n                            {{#each rows}}\n                            <div class=\"table-row\">\n                            {{#each this}}  \n                                <div class=\"table-data\">\n                                {{this}}\n                                </div>\n                            {{/each}}\n                            </div>\n                            {{/each}}\n                        </div>\n                </div>\n                <div class=\"button-container\">\n                    <Button class=\"button large\" click=\"(event){ paginate(currentPosition) }\">More</Button>\n                    <Button class=\"button large\" click=\"(event){ event.preventDefault(); goBack(); }\">Back</Button>\n                </div>\n                <Footer>Made by Tarados Feroces</Footer>`;\n    }\n}\n\nwindow.currentPosition = 5;\n\nwindow.paginate = (index) => {\n    const paginationConstant = 5;\n    httpModule.doPost('/score', {position: index, count: paginationConstant}).then(\n        (response) => router.viewUpdate(response)\n    );\n    window.currentPosition += paginationConstant;\n};","'use strict';\nimport userService from './modules/UserService/UserService'\nimport router from './modules/Router/Router'\nimport LoginView from './views/LoginView/LoginView'\nimport MenuView from './views/MenuView/MenuView'\nimport RegisterView from './views/RegisterView/RegisterView'\nimport AuthorizedView from './views/AuthorizedView/AuthorizedView'\nimport SettingsView from './views/SettingsView/SettingsView'\nimport LeaderboardView from './views/LeaderboardView/LeaderboardView'\n\nrouter\n    .addUrl(\n        '/login/',\n        new LoginView()\n    )\n    .addUrl(\n        '/',\n        new MenuView()\n    )\n    .addUrl(\n        '/signup/',\n        new RegisterView()\n    )\n    .addUrl(\n        '/user/',\n        new AuthorizedView()\n    )\n    .addUrl(/leaderboard/,\n        new LeaderboardView()\n    )\n    .addUrl(/settings/,\n        new SettingsView());\n\nif (userService.isAuthorized === undefined) {\n    userService.checkSession()\n    .then(\n        (response) => router.go(document.location.pathname),\n        (reject) => router.go(document.location.pathname)\n    );\n} else {\n    router.go(document.location.pathname);\n}\n\n"],"sourceRoot":""}